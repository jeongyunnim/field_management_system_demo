// src/components/StationMap.jsx
import { MapContainer, TileLayer, Marker, Popup, useMap } from "react-leaflet";
import { useEffect } from "react";
import L from "leaflet";
import markerIcon2x from "leaflet/dist/images/marker-icon-2x.png";
import markerIcon from "leaflet/dist/images/marker-icon.png";
import markerShadow from "leaflet/dist/images/marker-shadow.png";
import "leaflet-rotatedmarker";

// Í∏∞Î≥∏ ÏïÑÏù¥ÏΩò Í≤ΩÎ°ú Ïû¨ÏßÄÏ†ï
delete L.Icon.Default.prototype._getIconUrl;

L.Icon.Default.mergeOptions({
  iconRetinaUrl: markerIcon2x,
  iconUrl: markerIcon,
  shadowUrl: markerShadow
});

// Ï∞®Îüâ ÏïÑÏù¥ÏΩò ÏÑ§Ï†ï (public/icons/car-icon.png Í≤ΩÎ°ú Í∏∞Ï§Ä)
const carIcon = new L.Icon({
  iconUrl: "/icons/car-icon.png",
  iconSize: [32, 32],
  iconAnchor: [16, 16],
  popupAnchor: [0, -16]
});

// Station ÏïÑÏù¥ÏΩò ÏÑ§Ï†ï (public/icons/station-icon.png Í≤ΩÎ°ú Í∏∞Ï§Ä)
const stationIcon = new L.Icon({
  iconUrl: "/icons/station-icon.png", // ÎòêÎäî Í∏∞Î≥∏ ÎßàÏª§ ÏÇ¨Ïö© Í∞ÄÎä•
  iconSize: [32, 32],
  iconAnchor: [16, 32],
  popupAnchor: [0, -32]
});

// ÏßÄÎèÑ Ïù¥ÎèôÏùÑ ÏúÑÌïú ÎÇ¥Î∂Ä Ïª¥Ìè¨ÎÑåÌä∏
function RecenterMap({ lat, lon }) {
  const map = useMap();
  useEffect(() => {
    map.setView([lat, lon]);
  }, [lat, lon]);
  return null;
}

export default function StationMap({
  latitude,
  longitude,
  heading,
  stations = [] // ‚úÖ Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
}) {
  if (latitude == null || longitude == null) return null;

  const lat = latitude / 1e7;
  const lon = longitude / 1e7;

  return (
    <MapContainer
      center={[lat, lon]}
      zoom={15}
      scrollWheelZoom={true}
      style={{ width: "100%", height: "100%" }}
    >
      <TileLayer
        attribution="&copy; OpenStreetMap contributors"
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
      />
      <Marker
        position={[lat, lon]}
        icon={carIcon}
        rotationAngle={heading} // Í∞ÅÎèÑ ÏÑ§Ï†ï (Ï†ïÎ∂Å Í∏∞Ï§Ä ÏãúÍ≥ÑÎ∞©Ìñ•)
        rotationOrigin="center" // ÌöåÏ†Ñ Í∏∞Ï§ÄÏ†ê
      >
        <Popup>
          Ï∞®Îüâ ÏúÑÏπò
          <br />
          {lat.toFixed(6)}, {lon.toFixed(6)}
        </Popup>
      </Marker>

      {/* üì° Station ÎßàÏª§Îì§ Ï∂îÍ∞Ä */}
      {stations.map((station, idx) => (
        <Marker
          key={idx}
          position={[station.lat, station.lon]}
          icon={stationIcon}
        >
          <Popup>
            <strong>{station.name}</strong>
            <br />
            L2ID: {station.l2id}
            {station.distanceKm != null && !isNaN(station.distanceKm) && (
              <>
                <br />
                Í±∞Î¶¨:{" "}
                {Number(station.distanceKm) < 1
                  ? `${(Number(station.distanceKm) * 1000).toFixed(1)} m`
                  : `${Number(station.distanceKm).toFixed(1)} km`}
              </>
            )}
          </Popup>
        </Marker>
      ))}

      {/* ÏßÄÎèÑ Ïù¥Îèô */}
      <RecenterMap lat={lat} lon={lon} />
    </MapContainer>
  );
}
